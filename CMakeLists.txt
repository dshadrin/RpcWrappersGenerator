CMAKE_MINIMUM_REQUIRED( VERSION 3.11 )
CMAKE_POLICY(SET CMP0054 NEW)
PROJECT( RPC LANGUAGES CXX C)
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

SET(SolutionDir ${RPC_SOURCE_DIR})
SET(DestinationDir ${SolutionDir}/${PRJ_INSTALL_DIR})
SET(AutoGeneratedDir ${SolutionDir}/auto_generated)
#SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${SolutionDir}/bin/lib")
#SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${SolutionDir}/bin")
#SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${SolutionDir}/bin/lib")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF()

MESSAGE(STATUS "System: " ${CMAKE_SYSTEM_NAME} " " ${CMAKE_SYSTEM_VERSION})
MESSAGE(STATUS "Processor: " ${CMAKE_HOST_SYSTEM_PROCESSOR})
MESSAGE(STATUS "CMake generates: " ${CMAKE_GENERATOR})
MESSAGE(STATUS "Build type: " ${CMAKE_BUILD_TYPE})
MESSAGE(STATUS "Install directory: " ${DestinationDir})

################################################################################
IF (MSVC)

  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
  
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHa /Zc:wchar_t /wd4996 /wd4503 /wd4251")
  
  SET(Boost_USE_STATIC_LIBS ON)
  SET(Boost_USE_MULTITHREADED ON)
  INCLUDE_DIRECTORIES(${SolutionDir}/xerces-c-3.1.1/src)
 
################################################################################
ELSEIF (MINGW)

  ADD_DEFINITIONS(-DWIN32)
  ADD_DEFINITIONS(-DMINGW)
  ADD_DEFINITIONS(-DBOOST_LOG_DONOT_USE_WCHAR_T)
  ADD_DEFINITIONS(-D__NO_INLINE__)

  IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    ADD_DEFINITIONS(-D_DEBUG)
  ENDIF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")

  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fpermissive	")

  SET(Boost_USE_STATIC_LIBS ON)
  SET(Boost_USE_MULTITHREADED ON)

################################################################################
ELSEIF (UNIX)

  ADD_DEFINITIONS(-DLINUX)

  IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    ADD_DEFINITIONS(-D_DEBUG)
  ELSE ()
    ADD_DEFINITIONS(-DNDEBUG)
  ENDIF ()

  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11 -fpermissive")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")

  # use, i.e. don't skip the full RPATH for the build tree
  SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

  # when building, don't use the install RPATH already
  # (but later on when installing)
  SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
 
  # the RPATH to be used when installing, but only if it's not a system directory
  LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${DestinationDir}" isSystemDir)
  IF("${isSystemDir}" STREQUAL "-1")
    SET(CMAKE_INSTALL_RPATH "${DestinationDir}")
  ENDIF("${isSystemDir}" STREQUAL "-1")

  # add the automatically determined parts of the RPATH
  # which point to directories outside the build tree to the install RPATH
  SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

  SET(Boost_USE_STATIC_LIBS ON)
  SET(Boost_USE_MULTITHREADED ON)

  SET (XERCESC_STATIC OFF)
  FIND_PACKAGE(XercesC REQUIRED)
  IF (NOT XercesC_FOUND)
    MESSAGE(SEND_ERROR "Failed to find Xerces C++ libraries.")
  ELSE ()
    INCLUDE_DIRECTORIES(${XercesC_INCLUDE_DIRS})
  ENDIF ()

################################################################################
ELSE ()
  MESSAGE(SEND_ERROR "Unknown target : " ${PRJ_BUILD_TARGET})
ENDIF ()
################################################################################

MESSAGE(STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS})
MESSAGE(STATUS "SolutionDir: " ${RPC_SOURCE_DIR})

#LIST ( BOOST_LIB_LIST system )

IF(UNIX)
  FIND_PACKAGE(Boost COMPONENTS system filesystem program_options REQUIRED)
ELSEIF(MINGW)
  FIND_PACKAGE(Boost COMPONENTS system filesystem program_options REQUIRED)
ELSEIF(MSVC)
  FIND_PACKAGE(Boost COMPONENTS system program_options stacktrace_windbg REQUIRED)
ENDIF()

IF (NOT Boost_FOUND)
  MESSAGE(SEND_ERROR "Failed to find boost libraries.")
ELSE ()
  MESSAGE(STATUS "Boost include path: " ${Boost_INCLUDE_DIRS})
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})  
ENDIF ()

LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
#INCLUDE_DIRECTORIES(${SolutionDir}/include)  

IF (MSVC)
  ADD_SUBDIRECTORY( xerces-c-3.1.1 )
ENDIF ()

#ADD_SUBDIRECTORY( jsoncpp )
#ADD_SUBDIRECTORY( serialize )
ADD_SUBDIRECTORY( RpcApiStorage )
ADD_SUBDIRECTORY( RpcWrappersGenerator )

